#CREATE KEYRINGS
sudo mkdir -m 755 /etc/apt/keyrings

--------------------------

#INSTALL CONTAINER RUNTIME
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

----------------

#VERIFY NETWORK
lsmod | grep br_netfilter
lsmod | grep overlay
sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward

-------------------

#INSTALL DOCKER ENGINE
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl gnupg
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg

# Add the repository to Apt sources:
echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update


sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

#verify: 
docker ps

sudo usermod -aG docker ${USER}
sudo su - ${USER}
---------------
# INSTALL CONTAINERD
sudo apt install containerd.io

#verify:
systemctl status containerd

------------------
#VERIFY CGROUP
ps -p 1


sudo vi /etc/containerd/config.toml
#change the context inside with:
[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
    SystemdCgroup = true

sudo systemctl restart containerd

-----------------------
#INSTALL kubeadm, kubelet, kubectl

sudo apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
sudo apt-get install -y apt-transport-https ca-certificates curl

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# find out the version:
sudo apt-catche madison (package name) ???



# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list


sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl


-------------
# INIT CONTROL-PLANE
sudo kubeadm init --pod-network-cidr=10.1.0.0/24 --apiserver-advertise-address=10.1.0.7

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

#check if master works well
kubectl get pod


kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

kubectl get pods -A

kubectl get ds -A

kubectl edit ds weave-net -n kube-system 
(ajouter: - name: IPALLOC_RANGE
            value: 10.1.0.0/24)


-------------------------------------

 aller sur worker:

sudo kubeadm join 10.1.0.4:6443 --token 9pkndx.94vqqrhtbuk75hoc \
        --discovery-token-ca-cert-hash sha256:fe44256aa2f067c68da9233775e92397f62415bbbf16aad06473a470cac636ca

